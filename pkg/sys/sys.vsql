-- Copyright (c) 2020-present unTill Pro, Ltd.
-- @author Denis Gribanov

ABSTRACT WORKSPACE Workspace (
	ABSTRACT TABLE CRecord();

	ABSTRACT TABLE WRecord();

	ABSTRACT TABLE ORecord();

	ABSTRACT TABLE CDoc INHERITS CRecord();

	ABSTRACT TABLE ODoc INHERITS ORecord();

	ABSTRACT TABLE WDoc INHERITS WRecord();

	ABSTRACT TABLE CSingleton INHERITS CDoc();

	ABSTRACT TABLE WSingleton INHERITS WDoc();

	TYPE Raw (
		-- must not be bytes because the engine will expect urlBase64-encoded string as the value to put into this field
		Body varchar(65535) NOT NULL
	);

	-- target app, (target cluster, base profile WSID)
	TABLE WorkspaceID INHERITS sys.CDoc (
		OwnerWSID int64 NOT NULL,
		OwnerQName qname, -- Deprecated: use OwnerQName2
		OwnerID int64 NOT NULL,
		OwnerApp varchar NOT NULL,
		WSName varchar NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		TemplateName varchar,
		TemplateParams varchar(1024),
		WSID int64,
		OwnerQName2 text
	) WITH Tags=(WorkspaceOwnerTableTag);

	-- target app, new WSID
	TABLE WorkspaceDescriptor INHERITS sys.CSingleton (
		-- owner* fields made non-required for app workspaces
		OwnerWSID int64,
		OwnerQName qname, -- Deprecated: use OwnerQName2
		OwnerID int64,
		OwnerApp varchar, -- QName -> each target app must know the owner QName -> string
		WSName varchar NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		TemplateName varchar,
		TemplateParams varchar(1024),
		WSID int64,
		CreateError varchar(1024),
		CreatedAtMs int64 NOT NULL,
		InitStartedAtMs int64,
		InitError varchar(1024),
		InitCompletedAtMs int64,
		Status int32,
		OwnerQName2 text
	) WITH Tags=(WorkspaceOwnerTableTag);

	TABLE BLOB INHERITS WDoc (status int32 NOT NULL) WITH Tags=(WorkspaceOwnerTableTag);

	TABLE Subject INHERITS sys.CDoc (
		Login varchar NOT NULL,
		SubjectKind int32 NOT NULL,
		Roles varchar(1024) NOT NULL,
		ProfileWSID int64 NOT NULL,
		UNIQUEFIELD Login
	) WITH Tags=(WorkspaceOwnerTableTag);

	TABLE Invite INHERITS sys.CDoc (
		SubjectKind int32,
		Login varchar NOT NULL,
		Email varchar NOT NULL,
		Roles varchar(1024),
		ExpireDatetime int64,
		VerificationCode varchar,
		State int32 NOT NULL,
		Created int64,
		Updated int64 NOT NULL,
		SubjectID ref,
		InviteeProfileWSID int64,
		ActualLogin varchar,
		UNIQUEFIELD Email
	) WITH Tags=(WorkspaceOwnerTableTag);

	TABLE JoinedWorkspace INHERITS sys.CDoc (
		Roles varchar(1024) NOT NULL,
		InvitingWorkspaceWSID int64 NOT NULL,
		WSName varchar NOT NULL
	) WITH Tags=(WorkspaceOwnerTableTag);

	-- [~server.n10n.heartbeats/cmp.wsingleton.Heartbeat30~impl]
	TABLE Heartbeat30 INHERITS sys.WSingleton (
		Dummy int64
	);

	TYPE EchoParams (Text text NOT NULL);

	TYPE EchoResult (Res text NOT NULL);

	TYPE EnrichPrincipalTokenParams (
		Login text NOT NULL
	);

	TYPE EnrichPrincipalTokenResult (
		EnrichedToken text NOT NULL
	);

	TYPE GRCountResult (
		NumGoroutines int32 NOT NULL
	);

	TYPE ModulesResult (
		Modules varchar(32768) NOT NULL
	);

	TYPE RenameQNameParams (
		ExistingQName qname NOT NULL,
		NewQName text NOT NULL
	);

	TYPE CollectionParams (
		Schema text NOT NULL,
		ID int64
	);

	TYPE GetCDocParams (
		ID int64 NOT NULL
	);

	TYPE GetCDocResult (
		Result varchar(32768) NOT NULL
	);

	TYPE StateParams (
		After int64 NOT NULL
	);

	TYPE StateResult (
		State varchar(32768) NOT NULL,
		MaxRelevantOffset int64 -- is max view.sys.CollectionView.offs among taken in account records of the collection
	);

	TYPE InitiateInvitationByEMailParams (
		Email text NOT NULL,
		Roles text NOT NULL,
		ExpireDatetime int64 NOT NULL,
		EmailTemplate varchar(32768) NOT NULL,
		EmailSubject text NOT NULL
	);

	TYPE InitiateJoinWorkspaceParams (
		InviteID ref NOT NULL,
		VerificationCode text NOT NULL
	);

	TYPE InitiateUpdateInviteRolesParams (
		InviteID ref NOT NULL,
		Roles text NOT NULL,
		EmailTemplate varchar(32768) NOT NULL,
		EmailSubject text NOT NULL
	);

	TYPE InitiateCancelAcceptedInviteParams (
		InviteID ref NOT NULL
	);

	TYPE CancelSentInviteParams (
		InviteID ref NOT NULL
	);

	TYPE CreateJoinedWorkspaceParams (
		Roles text NOT NULL,
		InvitingWorkspaceWSID int64 NOT NULL,
		WSName text NOT NULL
	);

	TYPE UpdateJoinedWorkspaceRolesParams (
		Roles text NOT NULL,
		InvitingWorkspaceWSID int64 NOT NULL
	);

	TYPE DeactivateJoinedWorkspaceParams (
		InvitingWorkspaceWSID int64 NOT NULL
	);

	TYPE JournalParams (
		From int64 NOT NULL,
		Till int64 NOT NULL,
		EventTypes text NOT NULL,
		IndexForTimestamps text,
		RangeUnit text
	);

	TYPE JournalResult (
		Offset int64 NOT NULL,
		EventTime int64 NOT NULL,
		Event text NOT NULL
	);

	TYPE SqlQueryParams (
		Query text NOT NULL
	);

	TYPE SqlQueryResult (
		Result text NOT NULL
	);

	TYPE CreateWorkspaceIDParams (
		OwnerWSID int64 NOT NULL,
		OwnerQName qname, -- Deprecated: use OwnerQName2
		OwnerID int64 NOT NULL,
		OwnerApp text NOT NULL,
		WSName text NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		TemplateName text,
		TemplateParams text,
		OwnerQName2 text
	);

	TYPE CreateWorkspaceParams (
		OwnerWSID int64 NOT NULL,
		OwnerQName qname, -- Deprecated: use OwnerQName2
		OwnerID int64 NOT NULL,
		OwnerApp text NOT NULL,
		WSName text NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		TemplateName text,
		TemplateParams text,
		OwnerQName2 text
	);

	TYPE OnWorkspaceDeactivatedParams (
		OwnerWSID int64 NOT NULL,
		WSName text NOT NULL
	);

	TYPE OnJoinedWorkspaceDeactivatedParams (
		InvitedToWSID int64 NOT NULL
	);

	TYPE OnChildWorkspaceDeactivatedParams (
		OwnerID int64 NOT NULL
	);

	TYPE QueryChildWorkspaceByNameParams (
		WSName text NOT NULL
	);

	TYPE QueryChildWorkspaceByNameResult (
		WSName text NOT NULL,
		WSKind text NOT NULL,
		WSKindInitializationData text NOT NULL,
		TemplateName text NOT NULL,
		TemplateParams text,
		WSID int64,
		WSError text
	);

	VIEW RecordsRegistry (
		IDHi int64 NOT NULL,
		ID ref NOT NULL,
		WLogOffset int64 NOT NULL,
		QName qname NOT NULL,
		PRIMARY KEY ((IDHi), ID)
	) AS RESULT OF RecordsRegistryProjector WITH Tags=(WorkspaceOwnerTableTag);

	VIEW InviteIndexView (
		Dummy int32 NOT NULL,
		Login text NOT NULL,
		InviteID ref NOT NULL,
		PRIMARY KEY ((Dummy), Login)
	) AS RESULT OF ProjectorInviteIndex  WITH Tags=(WorkspaceOwnerTableTag);

	VIEW JoinedWorkspaceIndexView (
		Dummy int32 NOT NULL,
		InvitingWorkspaceWSID int64 NOT NULL,
		JoinedWorkspaceID ref NOT NULL,
		PRIMARY KEY ((Dummy), InvitingWorkspaceWSID)
	) AS RESULT OF ProjectorJoinedWorkspaceIndex WITH Tags=(WorkspaceOwnerTableTag);

	VIEW WLogDates (
		Year int32 NOT NULL,
		DayOfYear int32 NOT NULL,
		FirstOffset int64 NOT NULL,
		LastOffset int64 NOT NULL,
		PRIMARY KEY((Year), DayOfYear)
	) AS RESULT OF ProjectorWLogDates WITH Tags=(WorkspaceOwnerTableTag);

	VIEW CollectionView (
		PartKey int32 NOT NULL,
		DocQName qname NOT NULL,
		DocID ref NOT NULL,
		ElementID ref NOT NULL,
		Record  record NOT NULL,
		offs int64 NOT NULL,
		PRIMARY KEY ((PartKey), DocQName, DocID, ElementID)
	) AS RESULT OF ProjectorCollection WITH Tags=(WorkspaceOwnerTableTag);

	VIEW Uniques (
		QName qname NOT NULL, -- deprecated UNIQUEFIELD -> QName of the doc, new UNIQUE -> QName of the unique
		ValuesHash int64 NOT NULL,
		Values bytes(65535) NOT NULL,
		ID ref,
		PRIMARY KEY ((QName, ValuesHash), Values) -- partitioning is not optimal, no better solution
	) AS RESULT OF ApplyUniques WITH Tags=(WorkspaceOwnerTableTag);

	VIEW WorkspaceIDIdx (
		OwnerWSID int64 NOT NULL,
		WSName text NOT NULL,
		WSID int64 NOT NULL,
		IDOfCDocWorkspaceID ref(WorkspaceID), -- TODO: not required for backward compatibility. Actually is required
		PRIMARY KEY ((OwnerWSID), WSName)
	) AS RESULT OF ProjectorWorkspaceIDIdx WITH Tags=(WorkspaceOwnerTableTag);

	VIEW ViewSubjectsIdx (
		LoginHash int64 NOT NULL,
		Login text NOT NULL,
		SubjectID ref NOT NULL,
		PRIMARY KEY ((LoginHash), Login)
	) AS RESULT OF ApplyViewSubjectsIdx WITH Tags=(WorkspaceOwnerTableTag);

	TABLE ChildWorkspace INHERITS sys.CDoc (
		WSName varchar NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		TemplateName varchar,
		TemplateParams varchar(1024),
		WSClusterID int32 NOT NULL,
		WSID int64,           -- to be updated afterwards
		WSError varchar(1024) -- to be updated afterwards
	);

	TYPE InitChildWorkspaceParams (
		WSName text NOT NULL,
		WSKind qname NOT NULL,
		WSKindInitializationData varchar(1024),
		WSClusterID int32,
		TemplateName text,
		TemplateParams text
	);

	VIEW ChildWorkspaceIdx (
		dummy int32 NOT NULL,
		WSName text NOT NULL,
		ChildWorkspaceID int64 NOT NULL,
		PRIMARY KEY ((dummy), WSName)
	) AS RESULT OF ProjectorChildWorkspaceIdx WITH Tags=(WorkspaceOwnerTableTag);


	EXTENSION ENGINE BUILTIN (

		-- blobber

		COMMAND UploadBLOBHelper WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND DownloadBLOBHelper; -- Deprecated: use q.sys.DownloadBLOBAuthnz
		COMMAND RegisterTempBLOB1d WITH Tags=(WorkspaceOwnerFuncTag);
		QUERY DownloadBLOBAuthnz RETURNS void WITH Tags=(WorkspaceOwnerFuncTag);

		-- builtin

		COMMAND CUD() WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND Init(); -- Deprecated: use c.sys.CUD instead. Kept for backward compatibility only
		QUERY Echo(EchoParams) RETURNS EchoResult WITH Tags=(AllowedToEveryoneTag);
		QUERY GRCount RETURNS GRCountResult WITH Tags=(AllowedToEveryoneTag);
		QUERY Modules RETURNS ModulesResult WITH Tags=(AllowedToEveryoneTag);
		COMMAND RenameQName(RenameQNameParams) WITH Tags=(WorkspaceOwnerFuncTag);
		SYNC PROJECTOR RecordsRegistryProjector
			AFTER INSERT ON (CRecord, WRecord) OR
			AFTER EXECUTE WITH PARAM ON ODoc
			INTENTS(sys.View(RecordsRegistry));

		-- authnz

		QUERY EnrichPrincipalToken(EnrichPrincipalTokenParams) RETURNS EnrichPrincipalTokenResult WITH Tags=(WorkspaceOwnerFuncTag);

		-- collection

		QUERY Collection(CollectionParams) RETURNS any WITH Tags=(WorkspaceOwnerFuncTag);
		QUERY GetCDoc(GetCDocParams) RETURNS GetCDocResult WITH Tags=(WorkspaceOwnerFuncTag);
		QUERY State(StateParams) RETURNS StateResult WITH Tags=(WorkspaceOwnerFuncTag);
		SYNC PROJECTOR ProjectorCollection AFTER INSERT OR UPDATE ON (CRecord) INTENTS(sys.View(CollectionView));

		-- invite

		COMMAND InitiateInvitationByEMail(InitiateInvitationByEMailParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND InitiateJoinWorkspace(InitiateJoinWorkspaceParams) WITH Tags=(AllowedToAuthenticatedTag);
		COMMAND InitiateUpdateInviteRoles(InitiateUpdateInviteRolesParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND InitiateCancelAcceptedInvite(InitiateCancelAcceptedInviteParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND InitiateLeaveWorkspace WITH Tags=(AllowedToAuthenticatedTag);
		COMMAND CancelSentInvite(CancelSentInviteParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND CreateJoinedWorkspace(CreateJoinedWorkspaceParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND UpdateJoinedWorkspaceRoles(UpdateJoinedWorkspaceRolesParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND DeactivateJoinedWorkspace(DeactivateJoinedWorkspaceParams) WITH Tags=(WorkspaceOwnerFuncTag);
		QUERY QueryChildWorkspaceByName(QueryChildWorkspaceByNameParams) RETURNS QueryChildWorkspaceByNameResult WITH Tags=(WorkspaceOwnerFuncTag);
		PROJECTOR ApplyInvitation AFTER EXECUTE ON (InitiateInvitationByEMail) STATE(sys.AppSecret) INTENTS(SendMail);
		PROJECTOR ApplyCancelAcceptedInvite AFTER EXECUTE ON (InitiateCancelAcceptedInvite);
		PROJECTOR ApplyJoinWorkspace AFTER EXECUTE ON (InitiateJoinWorkspace);
		PROJECTOR ApplyLeaveWorkspace AFTER EXECUTE ON (InitiateLeaveWorkspace);
		PROJECTOR ApplyUpdateInviteRoles AFTER EXECUTE ON (InitiateUpdateInviteRoles) STATE(sys.AppSecret) INTENTS(SendMail);
		SYNC PROJECTOR ProjectorInviteIndex AFTER EXECUTE ON (InitiateInvitationByEMail) INTENTS(sys.View(InviteIndexView));
		SYNC PROJECTOR ProjectorJoinedWorkspaceIndex AFTER EXECUTE ON (CreateJoinedWorkspace) INTENTS(sys.View(JoinedWorkspaceIndexView));
		SYNC PROJECTOR ApplyViewSubjectsIdx AFTER INSERT ON (Subject) INTENTS(sys.View(ViewSubjectsIdx));

		-- journal

		QUERY Journal(JournalParams) RETURNS JournalResult WITH Tags=(WorkspaceOwnerFuncTag);
		PROJECTOR ProjectorWLogDates
			AFTER INSERT OR UPDATE ON (CRecord, WRecord) OR
			AFTER EXECUTE WITH PARAM ON ODoc
			INTENTS(sys.View(WLogDates))
			INCLUDING ERRORS;

		-- sqlquery

		QUERY SqlQuery(SqlQueryParams) RETURNS SqlQueryResult WITH Tags=(WorkspaceOwnerFuncTag);

		-- uniques

		SYNC PROJECTOR ApplyUniques
			AFTER INSERT OR UPDATE ON (CRecord, WRecord) OR
			AFTER EXECUTE WITH PARAM ON ODoc
			INTENTS(sys.View(Uniques));

		-- workspace

		COMMAND CreateWorkspaceID(CreateWorkspaceIDParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND CreateWorkspace(CreateWorkspaceParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND OnWorkspaceDeactivated(OnWorkspaceDeactivatedParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND OnJoinedWorkspaceDeactivated(OnJoinedWorkspaceDeactivatedParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND OnChildWorkspaceDeactivated(OnChildWorkspaceDeactivatedParams) WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND InitiateDeactivateWorkspace() WITH Tags=(WorkspaceOwnerFuncTag);
		COMMAND InitChildWorkspace(InitChildWorkspaceParams) WITH Tags=(WorkspaceOwnerFuncTag);
		PROJECTOR ApplyDeactivateWorkspace AFTER EXECUTE ON (InitiateDeactivateWorkspace);
		PROJECTOR InvokeCreateWorkspace AFTER INSERT ON (WorkspaceID);
		PROJECTOR InitializeWorkspace AFTER INSERT ON(WorkspaceDescriptor);
		PROJECTOR InvokeCreateWorkspaceID AFTER INSERT ON(ChildWorkspace);
		SYNC PROJECTOR ProjectorWorkspaceIDIdx AFTER INSERT ON (WorkspaceID) INTENTS(sys.View(WorkspaceIDIdx));
		SYNC PROJECTOR ProjectorChildWorkspaceIdx AFTER INSERT ON (ChildWorkspace) INTENTS(sys.View(ChildWorkspaceIdx));
	);

	TAG AllowedToAuthenticatedTag;
	TAG WorkspaceOwnerTableTag;
	TAG WorkspaceOwnerFuncTag;
	TAG AllowedToEveryoneTag;

	ROLE Everyone; -- assigned in any case regardless of whether the authorization token is provided or not
	ROLE Anonymous;  -- assigned if the token is not provided
	ROLE AuthenticatedUser; -- assigned if the valid token is provided
	ROLE System; -- assigned -> everything is allowed, ACL checking skipped
	ROLE ProfileOwner; -- assigned if the user or device works in its profile
	ROLE WorkspaceDevice; -- assigned if the device MAY work in a workspace that is owned by its profile
	ROLE RoleWorkspaceOwner; -- Deprecated: use WorkspaceOwner. Kept for backward compatibility only
	ROLE WorkspaceOwner; -- assigned if user works in a workspace that is owned by his profile
	ROLE ClusterAdmin; -- TODO: not used for now. Going to allow exec c.cluster.DeployApp to this role
	ROLE WorkspaceAdmin;

	GRANT WorkspaceOwner TO ProfileOwner;
	GRANT WorkspaceOwner TO WorkspaceDevice;
	GRANT WorkspaceOwner TO RoleWorkspaceOwner; --backward compatibility
	GRANT Everyone TO Anonymous;
	GRANT Everyone TO AuthenticatedUser;

	GRANT SELECT, INSERT, UPDATE, ACTIVATE, DEACTIVATE ON ALL TABLES WITH TAG WorkspaceOwnerTableTag TO WorkspaceOwner;

	GRANT SELECT ON TABLE ChildWorkspace TO WorkspaceOwner;

	GRANT EXECUTE ON ALL QUERIES WITH TAG WorkspaceOwnerFuncTag TO WorkspaceOwner;
	GRANT EXECUTE ON ALL COMMANDS WITH TAG WorkspaceOwnerFuncTag TO WorkspaceOwner;

	GRANT EXECUTE ON ALL QUERIES WITH TAG AllowedToEveryoneTag TO Everyone;

	GRANT EXECUTE ON ALL COMMANDS WITH TAG AllowedToAuthenticatedTag TO AuthenticatedUser;
);

ALTERABLE WORKSPACE AppWorkspaceWS (
	DESCRIPTOR AppWorkspace ();
);

ABSTRACT WORKSPACE ProfileWS (
	TYPE RefreshPrincipalTokenResult (
		NewPrincipalToken text NOT NULL
	);

	EXTENSION ENGINE BUILTIN (
		QUERY RefreshPrincipalToken RETURNS RefreshPrincipalTokenResult;
	);

	GRANT EXECUTE ON QUERY RefreshPrincipalToken TO ProfileOwner;
);

ALTERABLE WORKSPACE DeviceProfileWS INHERITS sys.ProfileWS (
	DESCRIPTOR DeviceProfile ();
);

EXTENSION ENGINE BUILTIN (
	STORAGE Record(
		/*
		Key:
			ID int64 // used to identify record by ID
			Singletone QName // used to identify singleton
		*/
		GET SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS),
		GETBATCH SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS),
		INSERT SCOPE(COMMANDS),
		UPDATE SCOPE(COMMANDS)
	) ENTITY RECORD;

	-- used to validate projector state/intents declaration
	STORAGE View(
		GET SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS),
		GETBATCH SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS),
		READ SCOPE(QUERIES, PROJECTORS, JOBS),
		INSERT SCOPE(PROJECTORS, JOBS),
		UPDATE SCOPE(PROJECTORS, JOBS)
	) ENTITY VIEW;

	STORAGE Uniq(
		/*
		Key:
			One or more unique fields
		Value:
			ID int64 (record ID)
		*/
		GET SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS)
	) ENTITY RECORD;

	STORAGE WLog(
		/*
		Key:
			Offset int64
			Count int64 (used for Read operation only)
		Value
			RegisteredAt int64
			SyncedAt int64
			DeviceID int64
			Offset int64
			Synced bool
			QName qname
			CUDs []value {
				IsNew bool
				...CUD fields...
			}
		*/
		GET SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS),
		READ SCOPE(QUERIES, PROJECTORS, JOBS)
	);

	STORAGE AppSecret(
		/*
		Key:
			Secret text
		Value:
			Content text
		*/
		GET SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS)
	);

	STORAGE RequestSubject(
		/*
		Key: empty
		Value:
			ProfileWSID int64
			Kind int32
			Name text
			Token texts
		*/
		GET SCOPE(COMMANDS, QUERIES)
	);

	STORAGE Http(
		/*
		Key:
			Method text
			Url text
			Body []byte
			HTTPClientTimeoutMilliseconds int64
			Header text (can be called multiple times)
			HandleErrors bool (do not panic, return error in response)
		Value:
			StatusCode int32
			Body []byte
			Header text (headers combined)
			Error text (if HandleErrors is true)
		*/
		READ SCOPE(QUERIES, PROJECTORS, JOBS)
	);

	STORAGE FederationCommand(
		/*
		Key:
			Owner text (optional, default is current app owner)
			AppName text (optional, default is current app name)
			WSID int64 (optional, default is current workspace)
			Token text (optional, default is system token)
			Command qname
			Body text
			ExpectedCodes text (optional, comma-separated, default is 200)
		Value:
			StatusCode int32
			NewIDs value {
				rawID1: int64
				rawID2: int64
				...
			}
			Result: value // command result
		*/
		GET SCOPE(QUERIES, PROJECTORS, JOBS)
	);

	STORAGE FederationBlob(
		/*
		Key:
			Owner text (optional, default is current app owner)
			AppName text (optional, default is current app name)
			WSID int64 (optional, default is current workspace)
			Token text (optional, default is system token)
			BlobID int64
			ExpectedCodes text (optional, comma-separated, default is 200)
		Value:
			Body: []byte // blob content, returned in chunks up to 1024 bytes
		*/
		READ SCOPE(QUERIES, PROJECTORS, JOBS)
	);

	STORAGE SendMail(
		/*
		Key:
			From text
			To text
			CC text
			BCC text
			Host text - SMTP server
			Port int32 - SMTP server
			Username text - SMTP server
			Password text - SMTP server
			Subject text
			Body text

		*/
		INSERT SCOPE(PROJECTORS, JOBS)
	);

	STORAGE Result(
		/*
		Key: empty
		ValueBuilder: depends on the result of the Command or Query
		*/
		INSERT SCOPE(COMMANDS, QUERIES)
	);

	STORAGE Response(
		/*
		Key: empty
		ValueBuilder:
			StatusCode int32
			ErrorMessage text
		*/
		INSERT SCOPE(COMMANDS, QUERIES)
	);

	STORAGE Event(
		/*
		Key: empty
		Value
			WLogOffset int64
			Workspace int64
			RegisteredAt int64
			SyncedAt int64
			DeviceID int64
			Offset int64
			Synced bool
			QName qname
			Error value {
				ErrStr text
				ValidEvent bool
				QNameFromParams qname
			}
			ArgumentObject value
			CUDs []value {
				IsNew bool
				...CUD fields...
			}
		*/
		GET SCOPE(PROJECTORS)
	);

	STORAGE CommandContext(
		/*
		Key: empty
		Value
			Workspace int64
			WLogOffset int64
			ArgumentObject value
			ArgumentUnloggedObject value
		*/
		GET SCOPE(COMMANDS)
	);

	STORAGE QueryContext(
		/*
		Key: empty
		Value
			Workspace int64
			WLogOffset int64
			ArgumentObject value
		*/
		GET SCOPE(QUERIES)
	);

	STORAGE JobContext(
		/*
		Key: empty
		Value
			Workspace int64
			UnixTime int64
		*/
		GET SCOPE(JOBS)
	);

	STORAGE Logger(
		/*
		Key:
			LogLevel int32
		Value
			Message text
		*/
		INSERT SCOPE(COMMANDS, QUERIES, PROJECTORS, JOBS)
	);
);
