-- Copyright (c) 2021-present unTill Pro, Ltd.
-- @author Denis Gribanov

ALTER WORKSPACE sys.AppWorkspaceWS (

	TABLE Login INHERITS sys.CDoc (
		ProfileCluster int32 NOT NULL,
		PwdHash bytes NOT NULL,
		AppName varchar NOT NULL,
		SubjectKind int32,
		LoginHash varchar NOT NULL,
		WSID int64,                                     -- to be written after workspace init
		WSError varchar(1024),                          -- to be written after workspace init
		WSKindInitializationData varchar(1024) NOT NULL,
			
		-- Comma-separated list of global roles
		-- [~server.authnz.groles/cmp.c.sys.UpdateGlobalRoles~impl]
		GlobalRoles varchar(1024)   
	);

	TYPE CreateLoginParams (
		Login text NOT NULL,
		AppName text NOT NULL,
		SubjectKind int32 NOT NULL,
		WSKindInitializationData text(1024) NOT NULL,
		ProfileCluster int32 NOT NULL
	);

	TYPE CreateLoginUnloggedParams (
		Password text NOT NULL
	);

	TYPE IssuePrincipalTokenParams (
		Login text NOT NULL,
		Password text NOT NULL,
		AppName text NOT NULL,
		TTLHours int32
	);

	TYPE IssuePrincipalTokenResult (
		PrincipalToken text NOT NULL,
		WSID int64 NOT NULL,
		WSError text(1024) NOT NULL
	);

	TYPE ChangePasswordParams (
		Login text NOT NULL,
		AppName text NOT NULL
	);

	TYPE ChangePasswordUnloggedParams (
		OldPassword text NOT NULL,
		NewPassword text NOT NULL
	);

	TYPE InitiateResetPasswordByEmailParams (
		AppName text NOT NULL,
		Email text NOT NULL,
		Language text
	);

	TYPE InitiateResetPasswordByEmailResult (
		VerificationToken text NOT NULL,
		ProfileWSID int64 NOT NULL
	);

	TYPE IssueVerifiedValueTokenForResetPasswordParams (
		VerificationToken varchar(32768) NOT NULL,
		VerificationCode text NOT NULL,
		ProfileWSID int64 NOT NULL,
		AppName text NOT NULL
	);

	TYPE IssueVerifiedValueTokenForResetPasswordResult (
		VerifiedValueToken text NOT NULL
	);

	TYPE ResetPasswordByEmailParams (
		AppName text NOT NULL
	);

	TYPE ResetPasswordByEmailUnloggedParams (
		Email text NOT NULL VERIFIABLE,
		NewPwd text NOT NULL
	);

	VIEW LoginIdx (
		AppWSID int64 NOT NULL,
		AppIDLoginHash text NOT NULL,
		CDocLoginID ref(Login) NOT NULL,
		PRIMARY KEY((AppWSID), AppIDLoginHash)
	) AS RESULT OF ProjectorLoginIdx;

	TYPE CreateEmailLoginParams (
		Email varchar VERIFIABLE,
		AppName text NOT NULL,
		SubjectKind int32 NOT NULL,
		WSKindInitializationData text(1024) NOT NULL,
		ProfileCluster int32 NOT NULL
	);

	TYPE CreateEmailLoginUnloggedParams (
		Password text NOT NULL
	);

	TYPE UpdateGlobalRolesParams (
		Login text NOT NULL,
		AppName text NOT NULL,
	 	GlobalRoles text(1024)
	);

	EXTENSION ENGINE BUILTIN (
		COMMAND ChangePassword (ChangePasswordParams, UNLOGGED ChangePasswordUnloggedParams);
		COMMAND ResetPasswordByEmail (ResetPasswordByEmailParams, UNLOGGED ResetPasswordByEmailUnloggedParams);
		COMMAND CreateLogin (CreateLoginParams, UNLOGGED CreateLoginUnloggedParams);
		COMMAND CreateEmailLogin (CreateEmailLoginParams, UNLOGGED CreateEmailLoginUnloggedParams); -- [~server.users/cmp.registry.CreateEmailLogin.vsql~impl]
		COMMAND UpdateGlobalRoles (UpdateGlobalRolesParams); -- [~server.authnz.groles/cmp.c.sys.UpdateGlobalRoles~impl]
		QUERY IssuePrincipalToken (IssuePrincipalTokenParams) RETURNS IssuePrincipalTokenResult;
		QUERY InitiateResetPasswordByEmail (InitiateResetPasswordByEmailParams) RETURNS InitiateResetPasswordByEmailResult;
		QUERY IssueVerifiedValueTokenForResetPassword (IssueVerifiedValueTokenForResetPasswordParams) RETURNS IssueVerifiedValueTokenForResetPasswordResult;
		SYNC PROJECTOR ProjectorLoginIdx AFTER INSERT ON Login INTENTS(sys.View(LoginIdx));
		PROJECTOR InvokeCreateWorkspaceID_registry AFTER INSERT ON(Login);
	);

	GRANT EXECUTE ON COMMAND ChangePassword TO sys.Anonymous;
	GRANT EXECUTE ON COMMAND ResetPasswordByEmail TO sys.Anonymous;
	GRANT EXECUTE ON COMMAND CreateLogin TO sys.Anonymous;
	GRANT EXECUTE ON QUERY IssuePrincipalToken TO sys.Anonymous;
	GRANT EXECUTE ON QUERY InitiateResetPasswordByEmail TO sys.Anonymous;
	GRANT EXECUTE ON QUERY IssueVerifiedValueTokenForResetPassword TO sys.Anonymous;
	GRANT SELECT ON TABLE Login TO sys.ProfileOwner;
);
